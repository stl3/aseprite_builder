check-version:
  name: Check latest Aseprite release
  runs-on: ubuntu-latest
  outputs:
    download_url: ${{ steps.version_info.outputs.download_url }}
    latest_tag: ${{ steps.version_info.outputs.latest_tag }}
    should_build: ${{ steps.should_build.outputs.should_build }}
    upload_url: ${{ steps.create_release.outputs.upload_url }}
  steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')

        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt

        if [[ -n "${LATEST_TAG}" ]]; then
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        fi
        if [[ -n "${DOWNLOAD_URL}" ]]; then
          echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        fi
        if [[ -n "${VERSION_INFO}" ]]; then
          echo "version_info=${VERSION_INFO}" >> $GITHUB_OUTPUT
        fi
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v4
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: cached_version
    - name: Should we start new build?
      id: should_build
      if: steps.version_check.outputs.cache-hit != 'true'
      run: echo "should_build=true" >> $GITHUB_OUTPUT
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false
